#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

template <class T>
struct SegmentTree{
  ll N;
  vector <T> tree;
  SegmentTree(ll _N){
    N = _N;
    tree.resize(4*N);
    build1(0, 0, N-1);
  }

  SegmentTree(vector<T> &init) {
    N = init.size();
    tree.resize(4*N);
    build1(0, 0, N-1, init);
  }

  T merge1(T a, T b){ // Reemplazar esta funcion para determinar como juntar dos nodos para obtener el valor de su padre, en este caso es suma
    return (a | b);
  }

  T merge2(T a, T b){ 
    return (a ^ b);
  }
  
  void build1(ll n, ll i, ll j){
    if(i == j){
      tree[n] = 0;
      return;
    }
    ll mid = (i+j)/2;
    build2(2*n+1, i, mid);
    build2(2*n+2, mid+1, j);
    tree[n] = merge1(tree[2*n+1], tree[2*n+2]);
  }

  void build1(int n, int i, int j, vector<T> &init){
    if(i == j){
      tree[n] = init[i];
      return;
    }
    int mid = (i+j)/2;
    build2(2*n+1, i, mid, init);
    build2(2*n+2, mid+1, j, init);
    tree[n] = merge1(tree[2*n+1], tree[2*n+2]);
  }

  void build2(ll n, ll i, ll j){
    if(i == j){
      tree[n] = 0;
      return;
    }
    ll mid = (i+j)/2;
    build1(2*n+1, i, mid);
    build1(2*n+2, mid+1, j);
    tree[n] = merge2(tree[2*n+1], tree[2*n+2]);
  }
  
  void build2(int n, int i, int j, vector<T> &init){
    if(i == j){
      tree[n] = init[i];
      return;
    }
    int mid = (i+j)/2;
    build1(2*n+1, i, mid, init);
    build1(2*n+2, mid+1, j, init);
    tree[n] = merge2(tree[2*n+1], tree[2*n+2]);
  }

  T query(ll l, ll r){
    return query(0, 0, N-1, l, r);
  }

  T query(ll n, ll i, ll j, ll l, ll r){
    if(l <= i && j <= r) return tree[n];
    ll mid = (i+j)/2;
    if(mid < l || r < i)
      return query(2*n+2, mid+1, j, l, r);
    if(j < l || r < mid+1)
      return query(2*n+1, i, mid, l, r);
    return merge(
        query(2*n+1, i, mid, l, r),
        query(2*n+2, mid+1, j, l, r));
  }

  void update(ll t, T val){
    update1(0, 0, N-1, t, val);
  }
  
  void update1(ll n, ll i, ll j, ll t, T val){
    if(t < i || j < t) return;
    if(i == j){
      tree[n] = val;
      return;
    }
    ll mid = (i+j)/2;
    update2(2*n+1, i, mid, t, val);
    update2(2*n+2, mid+1, j, t, val);
    tree[n] = merge1(tree[2*n+1], tree[2*n+2]);
  }

  void update2(ll n, ll i, ll j, ll t, T val){
    if(t < i || j < t) return;
    if(i == j){
      tree[n] = val;
      return;
    }
    ll mid = (i+j)/2;
    update1(2*n+1, i, mid, t, val);
    update1(2*n+2, mid+1, j, t, val);
    tree[n] = merge2(tree[2*n+1], tree[2*n+2]);
  }

  ll search(ll from, T val){
    if(!from) return search(0, 0, N-1, val);
    return search(0, 0, N-1, val+query(0, from-1));
  }

  ll search(ll n, ll i, ll j, T val){
    if(tree[n] < val) return -1;
    if(i==j && tree[n] >= val) return i;
    ll mid = (i+j)/2;
    if(tree[2*n+1] >= val) return search(2*n+1, i, mid, val);
    else return search(2*n+2, mid+1, j, val-tree[2*n+1]);
  }
};

int main(){
    ll n, m; cin >> n >> m;
    n = pow(2, n);
    vector <ll> a(n); for (auto &k: a) cin >> k;
    SegmentTree<ll> st(a);
    for (ll j = 0; j<m; j++){
        ll i, x; cin >> i >> x;
        st.update(i-1, x);
        cout << st.tree[0] << endl;
    }
}
/*

2 4
2 6 3 5
1 4
3 4
1 2
1 2

3 4
1 2 3 4 5 6 7 8
1 2
2 2
3 2
5 2

3 4
0 0 0 0 0 0 0 1
0 1
1 1
0 1
0 1

*/