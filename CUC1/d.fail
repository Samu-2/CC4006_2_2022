#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

vector<pair<int, pair<int, int>>> p;

template <class T>
struct SegmentTree{
  int N;
  set<pair<int, int>> f;

  vector <T> tree;
  SegmentTree(int _N){
    N = _N;
    tree.resize(4*N);
    build(0, 0, N-1);
  }

  SegmentTree(vector<T> &init, set<pair<int, int>> &_f) {
    f = _f;
    N = init.size();
    tree.resize(4*N);
    build(0, 0, N-1, init);
  }

  T merge(T a, T b){ // Reemplazar esta funcion para determinar como juntar dos nodos para obtener el valor de su padre, en este caso es suma
    int n1 = a.first;
    int n2 = b.first;
    auto p1 = a.second;
    auto p2 = b.second;
    pair<int, int> p3(max(p1.second, p2.first), min(p1.second, p2.first));
    int n3;
    bool con = f.find(p3) == f.end();
    if (con) {
        n3 = n1 + n2 +1;
    } else {
        n3 = n1 + n2;
    }
    pair<int, int> p4(p1.first, p2.second);
    pair<int, pair<int, int>> ret(n3, p4);
    return ret;
  }
  
  void build(int n, int i, int j){
    if(i == j){
      tree[n] = 0;
      return;
    }
    int mid = (i+j)/2;
    build(2*n+1, i, mid);
    build(2*n+2, mid+1, j);
    tree[n] = merge(tree[2*n+1], tree[2*n+2]);
  }

  void build(int n, int i, int j, vector<T> &init){
    if(i == j){
      tree[n] = init[i];
      return;
    }
    int mid = (i+j)/2;
    build(2*n+1, i, mid, init);
    build(2*n+2, mid+1, j, init);
    tree[n] = merge(tree[2*n+1], tree[2*n+2]);
  }

  T query(int l, int r){
    return query(0, 0, N-1, l, r);
  }

  T query(int n, int i, int j, int l, int r){
    if(l <= i && j <= r) return tree[n];
    int mid = (i+j)/2;
    if(mid < l || r < i)
      return query(2*n+2, mid+1, j, l, r);
    if(j < l || r < mid+1)
      return query(2*n+1, i, mid, l, r);
    return merge(
        query(2*n+1, i, mid, l, r),
        query(2*n+2, mid+1, j, l, r));
  }

  void update(int t, T val){
    update(0, 0, N-1, t, val);
  }
  
  void update(int n, int i, int j, int t, T val){
    if(t < i || j < t) return;
    if(i == j){
      tree[n] = val;
      return;
    }
    int mid = (i+j)/2;
    update(2*n+1, i, mid, t, val);
    update(2*n+2, mid+1, j, t, val);
    tree[n] = merge(tree[2*n+1], tree[2*n+2]);
  }

  int search(int from, T val){
    if(!from) return search(0, 0, N-1, val);
    return search(0, 0, N-1, val+query(0, from-1));
  }

  int search(int n, int i, int j, T val){
    if(tree[n] < val) return -1;
    if(i==j && tree[n] >= val) return i;
    int mid = (i+j)/2;
    if(tree[2*n+1] >= val) return search(2*n+1, i, mid, val);
    else return search(2*n+2, mid+1, j, val-tree[2*n+1]);
  }
};

int main() {
    int n, m; cin >> n >> m;
    set<pair<int, int>> f;
    p.resize(n); 
    for (auto &x: p) {
        int y; cin >> y;
        pair<int, int> p1(y, y);
        pair<int, pair<int, int>> p2(1, p1);
        x = p2;
    }

    for (int indx; indx=0; indx++){
        int f1, f2; cin >> f1 >> f2;
        int a = max(f1, f2);
        int b = min(f1, f2);
        pair<int, int> p1(a, b);
        f.insert(p1);
    }
    SegmentTree<pair<int, pair<int, int>>> st(p, f);

    cout << st.tree[0].first << endl;

    return 0;
}

/*
nxn        1      2      3       4      5      6      7      8 . . . n
nx0  nx0 + 1   nx
4 2
1 3 2 4
3 2
2 4

*/